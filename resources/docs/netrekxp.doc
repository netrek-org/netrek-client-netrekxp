*****************************************************
*                                                   *
*                                                   *
*   General Documentation for the NetrekXP Client   *
*                                                   *
*                                                   *
*    Comments, suggestion and bug reports to        *
*               keyos@keyos.org                     *
*                                                   *
*                                                   *
*  This is a modified version of COW.DOC which was  *
*  originally distributed with the Client Of Win    *
* (COW) netrek client.                              *
*                                                   *
*  The point of this version is to change the       *
*  original document to match the current           *
*  configuration options of NetrekXP.               *
*                                                   *
*                                                   *
*                                                   *
*    Document revised by Bill Balcerski in 2006     *
*                                                   *
*****************************************************


Table of Contents

 1.0  Overview
 2.0  Acknowledgements
 3.0  Features
 4.0  Complete Command Reference
 5.0  Netrekrc
 6.0  UDP/TCP
 7.0  MACROs, RCD, RCM
 8.0  MetaServer Options
 9.0  Player List Options
 10.0 Other Stuff (Beeplite, Cambot, etc)


1.0  Overview

	This document describes the NetrekXP client.   The client was originally built from COW source.  This document is an attempt to combine 3 separate documents that once existed (COW.doc, cow.txt, and netrekxp.doc) made by different authors over different times for different clients.  Mistakes may have been made, the author is only human.


2.0 Acknowledgements

	Many people contributed to the making of NetrekXP, and many many others contributed to its ancestor clients such as COW.  Here is an undoubtedly incomplete list of credits presented in no particular order:

              Scott Silvey
              Kevin Smith
              Rick Weinstein
              J. Mark Noworolski
              Tedd Hadley
              Heiko Wengler
              Andy McFadden
              Chris Guthrie
              Ed James
              Eric Mehlhaff
              Nick Trown
              Lars Bernhardsson
              Sam Shen
              Rick
              Jeff Nelson
              Jeff Waller
              Robert Kenney
              Dave Gosselin
              Kurt Siegl
              Kevin Powell 
              Alec Habig           
              Jonathan Shekter
              Steve Sheldon
              Stas Pirogov


3.0  Features

  3.1  Command Line Options

     This section will describe NetrekXP features that are selected from the command line when the client is invoked.  Selecting "-u" for usage or any invalid option will provide a brief summary of this section ( -help will work too ).
Most of the time you will not use the command line to start the client. However it is handy to the remember -h and -p options, so you will be able to connect to a server even when something is wrong with the metaserver (which happens from time to time). Or, for instance, if the server you want to connect to doesn't report itself to metaserver (so it won't appear in the metaserver window). 
It is good to remember that default ports for most of servers are 2592 for players and 2593 for observers. So if you want to observe game on continuum.us.netrek.org you will use "netrek -h continuum.us.netrek.org -p 2593". 
Here is the list of command options for NetrekXP:
  -h <server>		: specify server name to connect to
  -p <port>		: specify port number to connect to
  -r <configuration file>       : specify configuration file to read.  Using this option, two users can
run netrek from the same userid / account and still have unique defaults files.
  -s <socket port>		: specify socket port
  -u			: show usage information
  -A <password>		: specify character password
  -C <name>		: specify character name
  -U <udp port>		: specify UDP port
  -o			: use old style binary verification
  -R			: use RSA binary verification
  -P			: log server packets
  -c			: check players on server and return list
  -f <file name>		: record game to file (can be viewed later with -F)
  -F <file name>		: view recorded game
  -l <file name>		: record all messages to log file
  -m			: connect to metaserver (default)
  -k			: display known servers The client generates a list of known servers
			 after each call to the metaserver but only if the "metaCache" option is
			 set in your .netrekrc.
  -n			: show console window
  -v			: display client version info


4.0 Complete Command Reference

     The following is the complete list of commands you can use while in play. Note that all commands are case sensitive, and a ^ denotes a control key, e.g. ^a means control+a, which is different from ^A, which is control+A (control+shift+a, in other words). 

IMPORTANT NOTE: The keys listed are the defaults – most clients (including this one) come with a better keymap which is defined in the .netrekrc file.  So this section is useful more for a description of the commands, rather than what keys do what.


     Combat Functions:

c    Toggle cloak. 
{    Turn cloak on
}    Turn cloak off

d    Detonate enemy torps. All enemy torps within a certain range will explode. They do as little as a quarter of their normal damage at maximum det range. Detting is useful for protecting another ship, causing damage to other ships (if you can manage to det enemy torpedos fired by one enemy 
over another) or preventing torps from hitting you. Use it carefully, though: if there are many torps nearby and only one or two will actually hit you, it is better to let them hit than det, as one direct hit will do less damge than say, 5 detted torps, each at minimally 1/4 normal damage, probably more.

D    Detonate your torps. If you can do this near an enemy it will cause damage. It will also enable you to fire again if you have 8 torps active (the maximum.) This is not a very good idea however as you will be wasting gobs of fuel firing and then detting useless torps.

f    Fire plasma torpedo. You need at least 2 kills, and must be flying a BB/DD/CA to do this. Plasma torpedos are tracking, but they can be shot down fairly easily by phaser. They do a lot of damage but use a lot of fuel. Note also that when they are shot down they explode and ships that 
are too close can take damage.

p    Fire phaser. The mouse cursor specifies direction. 

s    Toggle shields
[    Shields down
]    Shields up

t    Fire photon torpedo. The mouse cursor specifies direction. 

u    Toggle shields

T    Toggle tractor beam. The mouse indicates the target. This pulls the target towards you but uses a lot of fuel and raises your engine temp. Since tractors are very useful and hitting shift-T is inconvenient, many players map lowercase t to this function.

y    Toggle pressor beam. Same as tractor (see 'T') but pushes.

_    (underscore) Turn tractor beam on. Mouse indicates target.
^    Turn pressor beam on. Mouse indicates target.

$    Turn tractor or pressor beam off.


     Movement And Navigation Functions:

0-9     Set speed to 0..9
( or )  Set speed to 10
!       Set speed to 11
@       Set speed to 12
#       Set speed to half of your maxwarp
%       Set speed to max
>       Increase speed by one
<       Decrease speed by one

k    Set course. The mouse cursor specifies direction. 

l    Lock onto object. The mouse cursor specifies what; it can be either a ship or a planet. A small triangle indicates the lock, and you will fly towards that object. If it is a planet or SB you will orbit / dock when you arrive.

;    Like l but only locks onto planets and starbases (things you can orbit or dock at)


*    Send in practice robot, if there's no one else playing. On many servers, this is also the key for starbase transwarp. This is Really Cool. Lock onto your SB, go no faster than warp 2, hit transwarp, and you will go warp reallyreallyfast until you reach the SB (at which point you will dock), run out of fuel, or die. This is handy for reaching the front lines fast. Not all servers support this.


     Planet Functions:

b    Bomb planet. You must be orbiting an enemy planet and in T-mode to do this. You only need to press it once and you will continue bombing until the planet reaches 4 or less armies.

C    Try to coup your home planet. This is a way to get back your home planet if you have no other planets.  Only possible after a genocide without a server reset, then everyone leaves, losing T, and people join the team that lost again.  You must have kills and be orbiting it.

o    Enter orbit or dock. You must be going no faster than warp 2 and be on top of a planet or starbase.

x    Beam armies down to planet (yours or enemy) or a starbase. You must be orbiting or docked to the planet or starbase in question.

z    Beam armies up from friendly planet or starbase. Again, you must orbit or dock. 


     Message Functions

E    Send generic distress call.

F    Send armies carried report

m    Start sending message. After hitting this key type the destination (0..9 and a..j = specific player, F/R/K/O = specific team, T = your team, A = all) and then the body of the message. Hit enter to send or escape to abort.

X     Enter macro mode. After pressing the macro key, you can send the macros you have assigned to those keys. See the section on macros. You also have available all the standard distress calls. Both the distress format and key can be changed (see: RCD). See the sections on Macros and RCD for specifics, including what the default macros are.

X?   Show macros window

^0..^9 
^@ 
^#
etc...
     The distress calls are all mapped to similar control keys. For example, instead of pressing <macro>0 to send an armies carried report, you can use ^0. See the section on RCDs for available distress calls / reports.
 

     Misc. Functions

e    Toggle docking permission (when playing a starbase). This allows or disallows other players to dock on you and repair, refuel, beam up/down armies, etc. If you turn off docking while players are docked, they will be undocked, hence the assigned key.

i or I    Get information on object near mouse. Uppercase shows different info than lowercase. You can use this to, for example, find out how many armies are on a planet, where a player is logged in from, how many kills they have, or whether a planet is agricultural.

N    Toggle planet names display on tactical window.

r    Refit. Use this to change your ship type. You must be orbiting your home planet (Earth for Fed, Romulus for Rom, Klingus for Kli, Orion for Ori) or your team's SB. After pressing r, press the key corresponding to the ship type you want (s=scout, d=destroyer, c=cruiser, b=battleship, 
a=assault, o=starbase/outpost)

R    Enter repair mode. This sets you at warp 0, and turns off shields and cloaking. Damage is repaired faster than normal in this state, but you cannot fire. To exit repair mode, raise shields or start moving. The fastest way to repair yourself is to do this while orbiting a repair planet or docked on an SB. When you are in repair mode a little R will appear in your flags and you will not be able to fire or cloak.

w    Change war declarations. This is important. Your weapons will not lock or explode on ships belonging to races which you are not at war with, and you will take damage if you orbit planets of hostile races. So, declare war with your enemy and peace with everyone else (so you can use their fuel and repair planets.) Note that if you change your war settings while an enemy is on the screen you will be unable to do anything for about ten seconds while "the computers get reprogrammed." The moral of this is: declare war before you go into battle. Note that you start out hostile to everyone, so if you forget before your first engagement it's not too critical.

q    Quit, don't re-read MOTD ("fastquit").

Q    Quit, exiting to MOTD screen. If you hit either of these in red alert, a self destruct timer will start. This is so you can blow up over your enemy. While the countdown is in progress, any input cancels it.

:    Toggle message logging. Saves all messages to a file so you can laugh at them later.

-    Request partial update (see the section on UDP and Short Packets)

=   Request full update (see the section on UDP and Short Packets)

|    Request medium update (everything except player statistics)

&    Re-read netrekrc file


     Window And Display Functions:

B    Cycle through galactic map planet display options. Possible options are show nothing, show owner, or show resources (the most useful, as on a color display you can tell owner by color.)

h    Toggle help window. Display a brief summary of these commands, as well as what key each command is currently assigned to.

H   Toggle hockey lines on tactical (local). Only for hockey servers
G   Toggle hockey lines on galaxy (map). Only for hockey servers
L    Toggle player window. This lets you see the names of the players, their stats, and, most importantly for defending planets, their kills.

/    Toggle between new and old playerlist format

A    Toggle alternate player list window
M    Toggle tools window
O    Toggle options window. There are many neat things here, most of which are configurable via the netrekrc file. Experiment! This is a really useful command.
P    Bring up the Planet window. Lists all planets, owner, who has info on them, number of     armies, and facilities at each.

S    Toggle stats window. This is a larger version of your dashboard, sort of. Kind of big and annoying and I don't like it but you might.

U    Toggle rank window. Shows you what ratings you need for promotion.

V    Cycle through tactical planet display options. Possible options are show nothing, show owner, or show resources (the most useful, as on a color display you can tell owner by color.)

~    Toggle sound control window

.    Toggle network stats window

,    Toggle ping stats window

`    Toggle short packets control window

+    Toggle UDP control window.

?    Cycle through show nothing / show one big message window / show three
message windows.

"    Save current configuration to netrekrc.sav

\    Reset dashboard timer to 00:00:00

v   Decrease sound volume by one notch

V   Increase sound volume by one notch

<space> Turn off all special windows (planet, rank, help, udp, etc.)


5.0 Netrekrc

NetrekXP looks for a netrekrc or xtrekrc file in your netrek install directory.  There are many, many options, and for a complete list, see the netrekrc_options.txt file in the docs directory.



For other options, see MACROs and Receiver Configurable Distress Calls.


  5.1 Keymaps

     The original key assignments were created more out of ease of memorization than speed of access in combat. For example, enabling the tractor beam is awkward, requiring the use of the shift key. Also, people will always have their particular preferences. For this reason, almost all
netrek players use a keymap to change the key assignments. Its use it quite simple. Simply add a line of the form "keymap: <key><function><key><function><key><function>...." to your netrekrc file. Each pair of characters assigns the key specified by <key> to perform the function originally assigned to the key specified by <function>. For example, to map toggle tractor (T) to 't', and set max warp (%) to 's', you would use

     keymap: tTs%

     The space bar can be remapped, but it cannot be the first key to be remapped in a sequence (obviously).  It is often mapped to det: 

     keymap: tTs% d


  5.2 Ckeymaps

     Control keymaps (ckeymap) handles the remapping of keys in an analoguous manner to the normal keymap (keymap).  The control keymap also allows the user to map both *upper* and *lower* case letters keys when pressed with the control key.  This means that ^u and ^U are
*different* keys when it come to mapping them. 

     Any combination of normal keys and control keys can be mapped to one another.  In other words, you can map from control key to control key, control key to normal key, normal key to normal key, and normal key to control key.
 
New format for ckeymap is:
c = any printable ascii character.
^ = introduce control mapping (the key '^' not control + key.)
 
Each entry is a pair, like:
cc              # regular format
c^c             # regular->control
^cc             # control->regular
^c^c            # control->control
 
Example ckeymap:
ckeymap:                 ^a%r^b^m^ca%d5 tfDFf^^E

Special case:
     The '^' must be mapped with a double ^ ("^^") in either the bound or binding key position.
 
Notes:
     If you experience difficulties (you shouldn't) you might wish to use a normal keymap and a new ckeymap in combination.  Both are read in, the keymap first then the ckeymap.  This means that if a key which is defined in both the keymap and ckeymap, the ckeymap's definition will be the one 
used.

     Analogously, control keys may be used for buttonmap, singleMacro and
all macro and RCD definitions.


  5.3 Ship Keymaps

You can add one of: sc, dd, ca, bb, as, sb, ga, att, default to the following default options to override them based on ship type:

rcfile-??:  	ship specific .netrekrc file,
keymap-??:	ship dependent keymap,
ckeymap-??:	ship dependent CTRL keymap,
buttonmap-??:	ship dependent buttonmap.

It will automatically reload the specified defaults if you change the shiptype. If a ship-specific option is not specified, the default option is used for that ship.  For e.g., keymap-sc: will be used
instead of keymap: whenever you switch to an SC.

Used well, this is a very powerful feature.  For instance, you might bind a key to your prefered cruising speed, with a different speed for each ship type.

Here's part of my keymap as an example.
# default: q = warp 2, w = 1/2 maxwarp, e = maxwarp
ckeymap: 	q2w#e%
# override some of the above, based on ship type
ckeymap-ca: 	w4
ckeymap-bb: 	w3
ckeymap-sb: 	q1w2


  5.4 General configuration:

Most options in the rc file can have four appearances:
     1. option.observer: string (i.e. "keymap.observer: aabbcc")
     2. option.servernick: string (i.e. "keymap.continuum: aabbcc")
        This one will work only if you have "server.servernick: servername" in
the rc (i.e. "server.continuum: continuum.us.netrek.org")
     3. option.servertype: string (i.e. "keymap.bronco: aabbcc")
        This will work if you either connect from the metaserver window (then servertypes are taken from metaserver report) or if you use option the "server.nickname" to map the server to a nickname and then define "serverType.nickname" to be one of "paradise, bronco, chaos, inl, sturgeon, hockey, dogfight" (so you will have two lines is the rc):
        "server.pickled: pickled.psychosis.net" and 
        "serverType.pickled: bronco"
     4. option: string (i.e. "keymap: aabbccdd")
The options are validated in the same order (from 1 to 4 where 1 is best match and 4 is worst match).


  5.5 Window configuration:

The "window.allow" option lets you set the type of messages logged into each message window (review, review_all, review_team, review_your, review_kill, review_phaser)
Message types:
         I - individual messages
        T - team messages
        A - all messages
        K - kill messages
        P - phaser messages
  Default settings:
        review.allow: ITAKP
        review_all.allow: A
        review_team.allow: T
        review_your.allow: I
        review_kill.allow: K
        review_phaser.allow: P

  5.6 Login options:

defaultShip: CA
     Default ship to use on button-click entry (SC,DD,CA,BB,AS,SB).

name: <your_name_here>
     Your default character name.

password: <whatever>
     Your default password. If both name and password are supplied, 
many clients will attempt to log you in automatically.


  5.7 Window placements:

 These are of the form 

     <window>.geometry: <width>x<height>+<xpos+<ypos>

 Or you can specifiy just the position:

     <window>.geometrey: +<xpos>+<ypos>

 or just the size:

     <window>.geometry: <width>x<height>


     Possible windows are:

     netrek         - main window
     local          - Main fighting window
     map            - Galactic map
     warn           - warning window
     message        - message window
     review         - all messages window 
     review_all     - messages to all window
     review_team    - messages to team window
     review_your    - messages to individual window
     review_kill    - kills messages window
     review_phaser  - phaser hits window
     planet         - planet list window
     player         - playerlist window
     player2        - alternate player list window
     war            - war declarations window
     fed            - Fed selection window
     ori            - Orion selection window
     rom            - Romulan selection window
     kli            - Klingon selection window
     quit           - The quit countdown clock
     option         - options menu window
     rank           - rank window
     stats          - statistics window
     tstat          - dasboard window
     help           - help window
     UDP            - UDP options window
     pingStats      - ping statistics window
     MetaServer List- (including the space) Metaserver window
     macro          - active Macros Window
     

     You can specify whether windows are initially mapped (displayed), like this:

     <window>.mapped: <on/off>.

     You can also specify parenting of windows. If one window is a child of another, when that window's parent is hidden or displayed, the child window will also be hidden or displayed. Also, a window that is not parented may have a caption on it, depending on your window manager or OS.



6.0 UDP/TCP


Connection Types: UDP and TCP explained

UDP provides an unreliable, packet-based protocol for sending data across an IP network.  There are a variety of ways that a UDP packet can be lost or discarded, including a failure of the underlying communication mechanism.  UDP implements a checksum over the data portion of the packet.  If the checksum of a received packet is in error, the packet will be dropped with no indication given to the user.  A queue of received packets is provided for each UDP socket.  This queue has a limited capacity.  Arriving datagrams which will not fit within its high-water capacity are silently discarded.

Guest              Rd     71       27            2% /  13%

The stats above show a typically UDP connection.  It has loss of packets but its round-trip times are fairly low.


TCP provides a reliable, flow-controlled, in order transfer of data across an IP network.  There is nothing fundamentally different about the way UDP and TCP packets travel over the wire.  The only real difference is that TCP will keep sending the same packet over and over
again until it gets an acknowledgement back.  As a result, TCP connects are typically slower than UDP connections and usually require more bandwidth.  TCP is slower because it guarantees that packets will arrive in order and so a lost packet can hold up later packets.

Example:

Guest          Ff    405      669            0% /   0%
                     ^^^      ^^^            ^^^^^^^^^

The above shows possibly the same connection with UDP turned off.  There is no loss but the round trip times are much higher.


NOTES:

*  The client always uses TCP for some things.  For example, the text messages that you can send to other players are implement in TCP to guarantee that they always arrive.  However, if a UDP connection is also available, it is used for the vast majority of communication.


*  You are recommended to use a TCP connection if you are at the same site (within a few milliseconds lag) of the server you are playing on.  The main reason for using UDP is to reduce your round trip times.
*  The option "tryUdp" can be used to set a preference for using UDP (tryUdp: on) or TCP only (tryUdp: off).
   

Short Packets:

Short packets are supported by COW.  These have been shown to substantially reduce the volume of traffic between the client and server, and will improve lag in many situations.  Not all
servers support short packets yet, but that is changing rapidly.

COW has a short packet window which is brought up with the "`" key. In this window you can turn short packets on and off as well as configure it in various ways.

Also in your netrek defaults file you can add the line

tryShort:	on

in order to have short packets automatically turned on whenever you connect to a server which allows it.

Don't forget about the - and | keys for requesting updates.



7.0 MACROs, RCD, RCM

Three types of macros exist in the client:  NBT, NEWMACRO, and SMARTMACRO.  NBT is always on, however NEWMACRO and SMARTMACRO can be turned off by a server which does not allow them.

You may see a list of what macros are in your client by hitting 'X' followed by '?'.  At the top of this list it shows which macros are enabled in the client right now.

NBT macros allow you enter a message in your netrekrc which you send regularly.  

macro.x.X:      <text here>

x  is any ascii character; it is the "name" of the macro (the key you press in macro mode to send the associated macro)
X  can be A,T,F,R,K,O where A=all, T=team, F=fed, R=rom, K=kli, O=ori (determines the message board to which the text body of the macro is sent)

Example: 
macro.b.T:              BOMB!!!!

For more information on NEWMACRO and SMARTMACRO see the NEWMACRO section below.


Receiver Configurable Distress Calls (RCD):

Receiver configurable distress calls have been added to the client and use a MACRO-like syntax.

In order to change the distress type a line such as the following should be in your defaults file.

dist.T.taking:		(%i) Carrying %a to %l%?%n>-1%{ @ %n%}

	or simply

dist.taking:		(%i) Carrying %a to %l%?%n>-1%{ @ %n%}

This has the format 
dist.[key].[name of distress]:		[macro]

Arguments for the macro and SMARTMACRO syntax are exactly the same as before.  Any argument can be used, but usually only those in the groups "Standard" and "FULLY CAPITALIZED" apply.

Note that if you don't want to ever see a certain distress, use the macro characters : %*.  For example,

      dist.free_beer: %*

will allow your client to simply ignore any "free beer" RCD's that get sent.

Below is a table giving the name of each distress, the key it is assigned to, and the default macro (at the time of this writing).
Note that except for E and F, these are all control keys.

Key  Name	Default Distress Macro
t    taking	%T%c->%O (%S) Carrying %a to %l%?%n>-1%{ @ %n%}
o    ogg	%T%c->%O Help Ogg %p at %l
b    bomb	%T%c->%O %?%n>4%{bomb %l @ %n%!bomb%}
c    space_control	%T%c->%O Help Control at %L
1    save_planet	%T%c->%O Emergency at %L!!!!
2    base_ogg	%T%c->%O Sync with --]> %g <[-- OGG ogg OGG base!!
3    help1	%T%c->%O Help me! %d%% dam, %s%% shd, %f%% fuel %a armies.
4    help2	%T%c->%O Help me! %d%% dam, %s%% shd, %f%% fuel %a armies.
e    escorting	%T%c->%O ESCORTING %g (%d%%D %s%%S %f%%F)
O    ogging	%T%c->%O Ogging %h
B    bombing	%T%c->%O Bombing %l @ %n
C    controlling	%T%c->%O Controlling at %l
5    asw	%T%c->%O Anti-bombing %p near %b.
6    asbomb	%T%c->%O DON'T BOMB %l. Let me bomb it (%S)
7    doing1	%T%c->%O (%i)%?%a>0%{ has %a arm%?%a=1%{y%!ies%}%} at %l.  %d%% dam, %s%% shd, %f%% fuel
8    doing2	%T%c->%O (%i)%?%a>0%{ has %a arm%?%a=1%{y%!ies%}%} at %l.  %d%% dam, %s%% shd, %f%% fuel
f    free_beer	%T%c->%O %p is free beer
n    no_gas	%T%c->%O %p @ %l has no gas 
h    crippled	%T%c->%O %p @ %l crippled
9    pickup	%T%c->%O %p++ @ %l
0    pop	%T%c->%O %l%?%n>-1%{ @ %n%}!
F    carrying	%T%c->%O %?%S=SB%{Your Starbase is c%!C%}arrying %?%a>0%{%a%!NO%} arm%?%a=1%{y%!ies%}.
@    other2	%T%c->%O (%i)%?%a>0%{ has %a arm%?%a=1%{y%!ies%}%} at %l. (%d%%D, %s%%S, %f%%F)
#    other3	%T%c->%O (%i)%?%a>0%{ has %a arm%?%a=1%{y%!ies%}%} at %l. (%d%%D, %s%%S, %f%%F)
E    help	%T%c->%O Help(%S)! %s%% shd, %d%% dmg, %f%% fuel,%?%S=SB%{ %w%% wtmp,%!%}%E%{ ETEMP!%}%W%{ WTEMP!%} %a armies!


Examples

     Let's walk through two simple examples.

     1. Map generic distress call (help) to 'h', make it appear as: "I'm
about to die with %a of your team's armies!"

     2. Map AS bombing (asbomb) to '^A', don't change the message.

     First try to seperate in your mind the two types of configurability
that are going on here.

     1) you are changing the key that sends the message
     2) you are changing how the message appears to you

     In order to do (1), just use a keymap.  Nearly everyone who has tried
to configure their netrek client has generated some form of keymap.

keymap: hE

     This performs the key configuration we wanted for the first example.

     In order to change the message,

dist.help:     %T%c->%O I'm about to die with %a of your team's armies!

     If you configure an RCD, you also must configure the header of that
message.  This isn't is difficult as it sounds, just add the header to the
beginning of the RCD.  For example, instead  of

dist.T.taking:      Carrying %a to %l%?%n>-1%{ @ %n%}

     use

dist.T.taking:      % %T%c@%b Carrying %a to %l%?%n>-1%{ @ %n%}

     Two headers that I recommend (the last is the default):

% %T%c@%b 
% %T%c->%O

     If you want to map the asbomb distress onto control-shift-a that is
slightly more difficult.  The asbomb distress normally is associated with
control-6.  Since control keys are involved, we MUST use the control key 
map feature called ckeymap.  The following line would perform the 
operation we would like.

ckeymap: ^A^6

     If you *also* want control-a to be asbomb, then use

ckeymap: ^A^6^a^6

     If you have read all the documentation, are sure you are using the
right syntax, and RCD (or MACRO) still is not working, then check out the
following.

     1. Did you receive RC_DISTRESS when you logged in?  

     The server must send this to the client to tell the client that it
understands RCD messages.  Otherwise the client will just send the standard
formatted RCDs.

     Some clients have a mod which shows you whether RC_DISTRESS is on by
looking at the first line of the macro window.  If it says, "Packages
active: NBT, NEWMACRO, SMARTMACRO",  you have no guarantee that RCD was
turned on by the server. If it says, "Packages active: NBT, NEWMACRO, 
SMARTMACRO, RC_DISTRESS" then RCD is definitely on.  Don't worry about #1, 
go to #2.


     2. Are any MACROs assigned to the same key as the RCD you are
configuring?

     If this occurs, you will see the macro and NOT the RCD.

     3. Are any other RCDs assigned to the same key as the RCD you are
configuring (this includes the DEFAULT RCDS!!) ?
   
     If this occurs, you will see whichever RCD happens to be listed first
when the client examines the RCD list.

NEWMACRO and SMARTMACRO documentation

*WARNING*  *WARNING*  *WARNING*  *WARNING*  *WARNING*
These features default ON in the client!  A server may turn them off *for you* if they are not allowed at that server.

If you are not at a server that allows NEWMACRO, then all targeted macros will be treated as normal NBT macros (no argument substitution, %a will broadcast as %a).  If you are not on a server that allows SMARTMACRO, then any conditional text or tests will *not* be evaluated,
instead they will be sent as the macro appears in your defaults file!

Compilers:
In order to use the below features, NBT and NEWMACRO must be defined.
In addition, SMARTMACRO must be defined to use the most advanced
features.


Here is the idea:
A player should be able to include in his/her macros whatever reasonable information is available.  And configuring its display in whatever way is desired.  In order to do this, the following
syntax is used (while remaining completely compatible with old NBT macros).

A key is assigned in the defaults file (ie netrekrc, etc) by a line like:

mac.F.T		Help!  Carrying %a!!

This defines a macro which will send a distress containing the number of armies a player is carrying to his team.

Note, this is NOT printf syntax!  Any attempt to use formatting will fail miserably.  Maybe in the future someone will want to develop a means of formatting the variables used in macros, but the only means I can think of are both bulky and ugly.

Here is another example:

mac.f		Help!  Carrying %a!!

Unlike the first, this macro will not send directly to the team, instead it requires that you give a third keystroke specifying the recipient.  For example, it could be invoked by:

XfT		<- to your team
Xf1		<- to player 1
XfG		<- if you are desperate, send to God
XfA		<- if you are stupid, send to ALL

Old macros will still work in addition to these, thus be sure there are no conflicts.  These generally cause suprising results.  For example, if this is in your macro file:

mac.E.T		Help!  I'm carrying!!
macro.E.A	You all suck!
mac.E		Help!  I'm a twink!!
mac.E.T		Help!  I'm carrying again!!
macro.E.A	You all suck even worse NOW!

The suprising results would be that pressing XE would broadcast the first two messages, and then wait for the destination of the third.  It would be impossible to ever use the last two.  Unfortunately, multiline macros also do not work if they require a destination.  There is no good reason for this, but since multiline macros annoy the hell out of me, I ain't fixing it.  You can still do something like:

mac.D.A:	D
mac.D.A:	O
mac.D.A:	O
mac.D.A:	S
mac.D.A:	H

This would properly broadcase 5 messages containing 1 character to all.  If you tried to specify the destination for these by using "mac.D:", only 'D' would be sent.

Also '?' can still not be used as a macro key.  The following definitions will work in a macro:

Standard:

%o	3 charcter team name of sender
%a      armies carried by sender
%d      sender damage percentage
%s      sender shield percentage
%f      sender fuel percentage
%w      sender wtemp percentage
%e      sender etemp percentage
%t      team id character of target planet
%T      team id character of sender team
%r	team id character of target team
%c      sender id character
%n      armies on target planet
%E      1 if etemped, 0 if not
%W      1 if wtemped, 0 if not
%S      sender two character ship type
%p      id character of target player
%g	id char of target friendly player
%h	id char of target enemy player
%P      id character of player nearest sender
%G	id char of friendly player nearest sender
%H	id char of enemy player nearest sender
%l      three character name of target planet
%N	full name of target planet
%i	sender full player name (16 character max)

%u	full name of target player (16 character max)
%z	3 letter team id of target planet
%b      3 char name of sender nearest planet
%k	kills of sender
%K	kills of target player

FULLY CAPITALIZED:
%O	three character team name of sender
%L	three character name of target planet
%I	sender full player name (16 character max)
%U	full name of target player (16 character max)
%Z	3 letter team id of target planet
%B      3 char id of sender nearest planet

Ping stats: (may differ slightly from server '!' ping stats)
%v    average ping stat round trip time 
%V    ping stat round trip standard deviation
%y    percent total packet loss as calculated by server formula

Miscellaneous:
%m      the last message you sent
%M	the last message you sent in all caps
%w	whydead number for RCM
%W	whydead text for RCM only
%>nn	Tab stop at position nn

As a further extension to NEWMACRO, a macro may now be sent to any of the following destinations:

%i %I %c	send message to self
%u %U %p	send message to player nearest mouse
%t %z %Z	send message to team of player nearest mouse
%g		send message to nearest friendly player to my ship
%h		send message to nearest enemy player to my ship

with a syntax like

#useful for INL...
mac.C.%i:	CAPTAIN
mac.N.%i:	NEWGALAXY
mac.S.%i:	START
mac.T.%i:	%Z

mac.W.%t:	SHUT UP, TWINKS!!
mac.I.%u:	%u: det when you escort!
mac.O.%u:	(%i) ogging

What this does is allows you to send a macro to a player or team specified by your mouse location instead of requiring a 3rd character to be input.  Also, it allows you to send messages to yourself without having to actual sit there and figure out who you are (they tried and failed back in the '60s).

>>>>The above is available when NEWMACRO is defined;  from here on,
>>>>SMARTMACRO must be defined *in addition*.

Further, tests may be done within the macro system, the syntax
for these test is as follows.
%?	introduces a test
=	equivalence
>	greater
<	less

Expressions are evaluated on a character by character basis until the test is resolved.  The text of the test is then replaced in the macro by 1 or 0.

Test are then fed to a syntax I call conditional text.  The best way to demonstrate how this works is example.

1%{included if true%!included if false%}

This would print:
included if true

0%{included if true%!included if false%}
included if false

Combining the whole package, a very robust macroing system is quickly generated.  One can easily design or mimic Distress calls, including the variable NBT distress of the COW client and all the
hardcoded message macroing built into my own client but never released.

Here are a few more samples to work from:

mac.F.T:	Help!  Carrying %a!!
mac.f:		Help!  Carrying %a!!
mac.c.T:	%p++ near %l

mac.b.T:	%?%n>4%{bomb %l at %n%!bomb%}
mac.d.T:	%E%{%!%W%{%!I'm fine.  How are you?  %}%}%E%{ETEMPED!!!  %}%W%{WTEMPED!!!  %}Carrying %?%a>0%{%a armies!%!NO armies.%}
mac.a.T:        %E%{ETEMPED!!!  %}%W%{WTEMPED!!!  %}Carrying %?%a>0%{%a armies!%!NO armies.%}
mac.R.A:	I'm a %?%S=SB%{star base!%!twink!%}
mac.K.A:	KissMy%S
mac.t:		thanks
mac.y:		yes
mac.n:		no
mac.B:		bye, getting hungry/sleep/horny
mac.e.T:	need escort going to %l%?%a>0%{, carrying %a armies!%}
mac.v.%t:       %T%c PING stats: Average: %v ms, Stdv: %V ms, Loss: %y%%

#My Favorite:
mac.m:		%m


Symbolic names for macro destinations

You always wanted to send a macro directly to the captain, base, or the second SC bomber?

Symbolic macro keys will solve your problems. Here how it goes:

In the netrekrc file you assign a key to a symbolic name:

	 key.[key].[dest]:	[name of key]

If the destination isn't specified the key defaults to team.

Examples:
key.C:		captain
key.B.t:	base
key.m.A:        me

Then you can use that new key in your macros.

Examples:
mac.o.C:        Hi Captain let me suggest a base ogg?
mac.a.B: 	BASE: Free armies for me?
mac.t.m:        TIME

Finally during runtime you may change the actual destination by sending a message:

	set [name of key] [destination id]

to the shell ("!") tools. Of corse this may be done with macros as well.

Examples:
mac.^C.!:	set captain %g
mac.^m.!:	set me %c

You can check the settings on the shell tools window "M".



Receiver Configurable Server Messages (RCM)

Short package kill messages may be freely configured using the macro syntax interpreter where

* the killed person corresponds to the sender,
* the killer corresponds to the target player,
* involved planet (killed by, destroyed, taken) to the target planet,
* damage is int part of kills and shield fraction part.
* whydead goes with wtmp.

All others are undefined.

The format of the messages is:

msg.[name of message]: [RCM macro]

Available messages and their defaults are:

msg.kill:  ........
msg.kill:GOD->ALL %i (%S) (%T%c%?%a>0%{+%a armies%!%}) was kill %?%d>0%{%k%!NO CREDIT)%} for %u (%r%p) %?%w>0%{%W%!%}
msg.planet:GOD->ALL %i (%S) (%T%c%?%a>0%{+%a armies%!%} killed by %l (%z) %?%w>0%{%W%!%}
msg.bomb:%N->%Z We are being attacked by %i (%T%c) who is %d%% damaged.
msg.destroy:%N->%Z %N destroyed by %i (%T%c)
msg.take:%N->%O %N taken by %i (%T%c)
msg.ghostbust:GOD->ALL %i (%S) (%T%c) was kill %k for the GhostBusters

BRMH formated kill windows may be obtained by something like:

msg.kill:  %i (%S) (%T%c%?%a>0%{+%a armies%!%}) %>30 kill %?%d>0%{%k%!NO CREDIT)%} for %u (%r%p) %?%w>0%{%>65%W%!%}



8.0 MetaServer Options

The MetaServer and the MetaServerCache are provided to help you find a netrek game to join.  Both services provide a list of the popular netrek servers.  The MetaServer is neat because provides information on the number of players at each site.  The MetaServerCache is neat because it is much faster if you can guess where a game will be.

To access the MetaServer, use the command line switch "-m". To access the MetaServerCache, use the "-k" switch instead.

You can use the options "metaport" and "metaserver" to point the client to a new MetaServer.  The defaults for these options are:

	 metaport: 3521
	 metaserver: metaserver.us.netrek.org


How to create a list of known servers for the MetaServerCache:

Before you can use the MetaServerCache, you must give the client a file in which to cache the information from the MetaServer.  Use the netrekrc option "metaCache" to specify this file.  The files path will be relative to your client directory.

	metaCache: metaCache

Unlike the MetaServer, the MetaServerCache will not show the number of people playing at a server.  If a server is contactable, it will be shown as "Active".

How much information will be shown:

You can now control the amount of information that the MetaServer displays for you by setting the "metaStatusLevel" flag.  The default is:
	
	metaStatusLevel: 3
	
	
The status levels are coded as follows.

0	Servers which have players but not a wait queue.
1	+ Servers with a wait queue.
2	+ Servers with nobody playing. (see NOTE1).
3	+ Servers which have Timed Out for the MetaServer (see NOTE2).
4	+ Servers which the MetaServer has not been able to connect to.

NOTE1: When using the MetaServerCache, "metaStatusLevel" values of less than 3 are treated as the value 3.  This minimum is enforced because the cache does not attempt to show the number of people playing at a site.

NOTE2: If you are a long way from the MetaServer, you are advised to ignore TimeOut errors.  For example, the MetaServer in America may have difficulty contacting to a server in Holland while the link from England to Holland is very good.

The Fallback

If you attempt to contact the MetaServer, and the connection times out, the client will try to show the MetaServerCache instead.

Similarly, if you attempt to use the MetaServerCache, and your "metaCache" file does not exist, the client will attempt to call the MetaServer.



9.0 Player List Options

Spc  Let   Name                 Header
---  ---   -------------------- -------------------
  3  'n'   Ship Number          " No"
  3  'T'   Ship Type            " Ty"
 11  'R'   Rank                 " Rank      "
 17  'N'   Name                 " Name            "
  6  'K'   Kills                " Kills"
 17  'l'   Login Name           " Login           "
  6  'O'   Offense              " Offse"
  6  'W'   Wins                 "  Wins"
  6  'D'   Defense              " Defse"
  6  'L'   Losses               "  Loss"
  6  'S'   Total Rating (stats) " Stats"
  6  'r'   Ratio                " Ratio"
  8  'd'   Damage Inflicted(DI) "      DI"
  1  ' '   White Space          " "
PLIST1
  6  'B'   Bombing              " Bmbng"
  6  'b'   Armies Bombed        " Bmbed"
  6  'P'   Planets              " Plnts"
  6  'p'   Planets Taken        " Plnts"
 17  'M'   Display/Host Machine " Host Machine    "
  7  'H'   Hours Played         " Hours "
  6  'k'   Max Kills            " Max K"
  6  'V'   Kills per Hour       "   KPH"
  6  'v'   Deaths per Hour      "   DPH"
PLIST2
  9  'w'   War staus            " War Stat"
  3  's'   Speed                " Sp"
 
So for example if you just wanted to see names and rank you'd add this line to your netrekrc:
 
playerlist: NR

     In order for this mod to be in effect you must compile with PLIST defined, otherwise you will get either of the two currently available defaults.  The things shown after PLIST1 are only available if you have PLIST1 defined, the same goes for the things after PLIST2, but you must have PLIST defined or neither of these will do anything.
 
NOTE FROM SOURCE KEEPER:
PLIST2 is not active in BRM currently.  Some players feel that placing speed on the playerlist gives a strategic advantage.

NOTE ON SB STATS :
On servers which support the SBHOURS .feature, you will see slightly different things when you info a SB, or show the SB player on the  playerlist.  The usual offense and defense lines are replaced with SB kills/hour and deaths/hour.  The kills, deaths, hours and ratio entries are all the player's SB stats as long as he is in the SB, and his normal stats otherwise.


Predefined "playerlist" styles:

For your viewing pleasure we have predefined some playerlist layouts that you might like to try.  These predefined styles can be selected using the "playerListStyle" option in your netrekrc or by using the options menu (shift-O).

The "playerListStyle" options are:

	0: Custom style 	= playerlist
	1: Old style 		= "nTRNKWLr O D d "
	2: COW style 		= "nTR N  K lrSd"
	3: Kill watch style	= "nTK  RNlr Sd"
	4):BRMH style	= "nTR N  K l M"


For backward compatability, the option "newPlist" will still select between the old style playerlist (off) and the COW style playerlist (on) if the "playerListStyle" option does not appear in your netrekrc.

It is also possible to select the amount of decimal places in playerlist float numbers.   
  Example:
  "playerlist: nTK1  RNr1 S1d0" in order to see:
  "R0 CA 0.5  Ensign guest 0.8 2.4 95"
  or giving old "playerlist: nTK RNr Sd" will give you:
  "R0 CA 0.50 Ensign guest 0.82 2.43 95.07"
Current options that can be followed by numbers 0-2 are: KODSrdBPHkVv

The "partitionPlist" option:

Lets face it, the main role of the player list is so that you can keep track of who has kills.

To make life easier, the player list is sorted so that enemy and friendly teams are always in the same place in the list.  However, in mono it is not immediately obvious where one team starts and another team ends.  If the "partitionPlist" option is "on", white space will be added to the player list to separate your teams from the other teams and the players entering the game.  In color, this option is not usually required because the teams are distinct anyway.


10.0 Beeplite

     Local weenies cheat.  They talk to each other.  Those of us who have never met another netrek player are forced to rely heavily on the message window.

     In order to even the playing field, the current feature was proposed. This feature causes certain types of RCD messages to beep or even highlite specific objects on the screen.  This is done via a
macro-like interface which is highly configurable.  Further, bitmaps used to highlite can be substituted with your preferences.

1) Turning Beeping and Highliting on

     In order to turn message beeping and highliting on, you must include the following in your .netrekrc.

UseLite: on

     The above leaves you with the feature on, but nothing is automatically setup.  If you want to configure it yourself, go to the "CONFIGURING VIA NETREKRC" section.  You can include a set of reasonable defaults, instead of bothering to learn to configure it yourself by including
the lines.

DefLite: on

2) Configuring via netrekrc

     Message beeps are configured as on and off.  They are turned on if the proper line is in your .netrekrc.  Otherwise they are left off.

     Message lites are configured in a way very similar to macros.  However, in addition to the original set of macro arguments, a new class of arguments is introduced to handle the highliting.

     To configure message highliting, include something like the line below. Here "name of distress" is the RCD message type.  "macro" is the macro style syntax specifying what is to be highlited.

lite.[name of distress]:  [macro]

     Below are the configurations which are equivalent to the defaults which are setup for you if using DefLite.  These provide good examples for how the system works.

lite.taking:   /c/l
lite.base_ogg: /g/m
lite.pickup:   /h
lite.help:  %?%S=SB%{/c%}

     The above does the following:
     
"taking" message highlites the planet and taker
"base_ogg" message highlites the person to sync and your ship 
      (to REALLY get your attention)
"pickup" message highlites the enemy who picked up
"help" tests to see if the player sending the distress is a base, if so
      he is highlited

     You might like to change the last one to:
     
lite.help:  %?%S=SB%{/c%}%?%a>0%{/c%}

     This will highlite bases who distress AND carriers who distress.

     Using TTS you may change the pickup macro to:
     
lite.pickup:   /h/|%p++ @ %l|

     This sends a big ++ message on the tactical map in addition to the light.

     Note that all the MACRO parsing routines are run on these, and plain 
text left over is ignored.  Only the highlite argument matter.

     The following are the arguments for highliting:

/c /i /I   sender
/m /M      _your_ ship

/p      target player
/g      target friendly player
/h      target enemy player
/P      player nearest sender
/G      friendly player nearest sender
/H      enemy player nearest sender
/b      planet nearest sender
/l      target planet

     The following are the arguments for sounds:

/0      Standard window beep (incoming message sound if sound is on) 
/1 - /9 Play nt_message1 - nt_message9 sound.

     Tactical Text Solution for the Tactical Tunnel Syndrome (TTS):

/| .. | displays Text in between via TTS. 
 
     Additional defaults:

planetCycleTime:        highlighting time for planets
playerCycleTime:        highlighting time for players

tts_color:              color of TTS message (should be dark)
tts_font:               Font (large prefered)
tts_max_len:            Max length of a message
tts_time:               Time a TTS message is displayed
tts_ypos:               y location of the TTS message

10.1 Cambot

Making the recordings:
To make a recording, use the command: netrek -f cambot.pkt, where cambot.pkt is a file name of your choosing (where the playback will be saved).

Playing the recordings:
To view the recordings use the command: netrek -F cambot.pkt

While in the recording the following commands can be used: (These keys are
referenced after the netrekrc keymap.) 

Lock Player(l) to lock onto a player.
Lock Planet(;) to lock onto a planet.
Speed keys(1-8) to change the speed of the recording.
Speed 9, or #, or !, or @, or % for maximum playback speed.
Speed 0 (0) for pause.
The key < doubles playback speed.
The key > halves playback speed.
The key R starts recording back at the beginning.

The key ( reverses the recording.
The key ) returns to normal play.
Quit (q/Q) to quit

